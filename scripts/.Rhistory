library(dplyr)
library(ggplot2)
library('RUVSeq')
library(RColorBrewer)
library(oligo)
library(EDASeq)
library(gplots)
library(ggrepel)
library(svglite)
library(ComplexHeatmap)
library(VennDiagram)
library(eulerr)
library(tidyverse)
library(grid)
GenewiseCounts <- read.delim(
"../data/rna_align/counttable.txt",sep = "\t",
row.names = 1, header = T, comment.char = "#")
dim(GenewiseCounts)
head(GenewiseCounts[,1:6])
gwc <- GenewiseCounts[,5:length(GenewiseCounts[1,])]
gwc[,grepl("fq\\.gz",colnames(gwc))] <- NULL
pnapat <- "\\.\\.\\.data\\.rna_align\\..*_(\\d)_(.*)\\.bam"
colnames (gwc) <- gsub(pnapat,"\\2_\\1", colnames(gwc))
colnames (gwc) <- gsub(".*\\.hash\\d_(.*)\\.bam","\\1_3", colnames(gwc))
newnames <- read.delim("../data/samples/samples.tsv", header = F)
newnames <- unlist(newnames)
names(newnames) <- NULL
newnames <- gsub("-", "_", newnames)
colnames(gwc) <- c("Length",newnames)
# take only MH data to start:
gwc <- gwc[,!grepl("col", colnames(gwc))]
newnames <- newnames[!grepl("col", newnames)]
colnames (gwc)
gwc_lexogen <- gwc
# select controls:
ctrl_raw <- gwc[,grepl("control_\\d$|Length$", colnames (gwc))]
gene_lengths <- ctrl_raw$Length
raw_ctrl_counts <- ctrl_raw[,2:3]
norm_length <- data.frame(sapply(raw_ctrl_counts, function(x) x / gene_lengths))
tpm_matrix <- data.frame(sapply(norm_length, function(x) x * 1e6 / sum(x)), row.names = rownames(ctrl_raw))
pairs(log(tpm_matrix))
tpm_matrix$genename <- alt_names
test <- gsub("_\\d[ab]?", "" , newnames)
test <- as.factor(test)
test
y <- DGEList(gwc[,-1], group = test, genes = gwc[,1,drop=FALSE])
options(digits = 3)
head(y$samples)
L <- min(y$samples$lib.size) / 1000000
cutoff <- 10/L
keep <- rowSums(cpm(y) > cutoff) >= 10
table(keep)
y <- y[keep, , keep.lib.sizes=FALSE]
batches <- factor(gsub(".*(\\d).*","\\1",rownames(y$samples)))
design <- model.matrix(~0+test+batches)
colnames(design) <- c(levels(test), "batch2", "batch3")
rownames(design) <- colnames(y$counts)
design[1:5,]
y <- calcNormFactors(y)
y <- estimateDisp(y, design, robust = T)
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Set1"))(nb.cols)
plotPCA(cpm(y), col="black", bg=mycolors[test],  labels=F, pch=21, cex=3)
legend("bottomright", legend = levels(test), pch=21,
cex=1.2, col="black",  pt.bg = mycolors[test], pt.cex = 2)
plotPCA(cpm(y), col="black", bg=mycolors[test],  labels=F, pch=21, cex=3)
legend("bottomright", legend = levels(test), pch=21,
cex=1.2, col="black",  pt.bg = mycolors[test], pt.cex = 2)
plotPCA(cpm(y), col=mycolors[test], bg=mycolors[test])
plotPCA(cpm(y), col=mycolors[test[1:30]], bg=mycolors[test[1:30]])
rle <-plotRLE(cpm(y), outline=FALSE, ylim=c(-1, 1), col=mycolors[test],
main="RLE", las=2)
#pdf("../analysis/PCA_TMM_allsamples.pdf")
#plotPCA(cpm(y), col=mycolors[test], bg=mycolors[test])
#dev.off()
#pdf("../analysis/PCA_TMM_mullerhinton.pdf")
plotPCA(cpm(y)[,1:30], col=mycolors[test[1:30]], bg=mycolors[test[1:30]])
#dev.off()
#pdf("../analysis/RLE_TMM_mullerhinton.pdf")
plotRLE(cpm(y), outline=FALSE, ylim=c(-1, 1), col=mycolors[test],
main="RLE", las=2)
#dev.off()
#pdf("../analysis/PCA_TMM_m9.pdf")
#plotPCA(cpm(y)[,31:37], col=mycolors[test[31:37]], bg=mycolors[test[31:37]])
#dev.off()
set <- newSeqExpressionSet(as.matrix(y$counts),
phenoData = data.frame(batches, row.names=colnames(y$counts)))
set <- betweenLaneNormalization(set, which="upper")
colors <- colorRampPalette(brewer.pal(8, "Set2"))(16)
plotRLE(set, outline=FALSE, col=colors[test])
plotPCA(set, col=colors[test], cex=1.2)
# make a contrast:
con <- makeContrasts(acpP_vs_ctrl = acpP - control,
acpP_scr_vs_ctrl = acpP_scr - control,
adk_vs_ctrl = adk - control,
csrA_vs_ctrl = csrA - control,
dnaB_vs_ctrl = dnaB - control,
ftsZ_vs_ctrl = ftsZ - control,
nusG_vs_ctrl = nusG - control,
pyrH_vs_ctrl = pyrH - control,
rnp_vs_ctrl = rnp - control,
rplS_vs_ctrl = rplS - control,
rpoD_vs_ctrl = rpoD - control,
rpsH_vs_ctrl = rpsH - control,
tnaB_vs_ctrl = tnaB - control,
yidC_vs_ctrl = yidC - control,
ispH_vs_ctrl = ispH - control,
levels = design)
fit <- glmQLFit(y, design, robust = TRUE)
acpP_vs_ctrl <- glmQLFTest(fit, contrast = con[,2])
all_res_tmm <- list(acpP_vs_ctrl = glmQLFTest(fit, contrast = con[,1]),
acpPscr_vs_ctrl = glmQLFTest(fit, contrast = con[,2]),
adk_vs_ctrl = glmQLFTest(fit, contrast = con[,3]),
csrA_vs_ctrl = glmQLFTest(fit, contrast = con[,4]),
dnaB_vs_ctrl = glmQLFTest(fit, contrast = con[,5]),
ftsZ_vs_ctrl = glmQLFTest(fit, contrast = con[,6]),
nusG_vs_ctrl = glmQLFTest(fit, contrast = con[,7]),
pyrH_vs_ctrl = glmQLFTest(fit, contrast = con[,8]),
rnp_vs_ctrl = glmQLFTest(fit, contrast = con[,9]),
rplS_vs_ctrl = glmQLFTest(fit, contrast = con[,10]),
rpoD_vs_ctrl = glmQLFTest(fit, contrast = con[,11]),
rpsH_vs_ctrl = glmQLFTest(fit, contrast = con[,12]),
tnaB_vs_ctrl = glmQLFTest(fit, contrast = con[,13]),
yidC_vs_ctrl = glmQLFTest(fit, contrast = con[,14]),
ispH_vs_ctrl = glmQLFTest(fit, contrast = con[,15])
)
plotMD(y, main = "MD-plot")
abline(h=0, col="red", lty=2, lwd=2)
plotBCV(y)
plotQLDisp(fit)
do_volcano <- function(restab, targetgene, pointsize = 2, x_limit = F,y_limit=F, show_sig = F, alpha=0.05,
minlogfc=1, title = "Volcano", off_target_list = NULL) {
rownames(restab) <- gsub("^([^A-Z].+)" , "italic('\\1')" , rownames(restab))
g = ggplot(restab) +
geom_point(
data = restab,
aes(x = logFC, y = -log10(FDR)),
color = "darkgrey",
cex = pointsize
) + theme_bw()+ # change theme to standard black&wite.
geom_hline(yintercept = -log10(alpha),
color = "black", linetype = 3) +
geom_vline(xintercept = c(-minlogfc,minlogfc),
color = "black", linetype = 3) +
theme(axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20),
axis.text = element_text(size=15, colour = "black"),
panel.background = element_rect(colour = "black"),
axis.line = element_line(colour = "black"),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x =  element_blank(),#element_line(colour="lightgrey", size=0.3),
panel.grid.major.y = element_blank(),#element_line(colour="lightgrey", size=0.3),
plot.title = element_text(hjust = 0.5, size = 23))+
ggtitle(title)+
xlab(expression("Log"[2]*" fold change")) +
ylab("- Log10 P-value (FDR)")+
scale_x_continuous(expand = c(0,0),breaks = seq(-6,6,2), limits = c(-x_limit,x_limit)) +
scale_y_continuous(expand = c(0, 0),breaks = seq(0,26,2), limits = c(0,y_limit))
if (is.null(off_target_list)) {
g <- g +
geom_point(
data = restab[restab$FDR<alpha & restab$logFC < -minlogfc,],
aes(x = logFC, y = -log10(FDR)),
color = "blue",
cex = pointsize) +
geom_point(
data = restab[restab$FDR<alpha & restab$logFC > minlogfc,],
aes(x = logFC, y = -log10(FDR)),
color = "red",
cex = pointsize)
} else{
# show all mismatches with significant regulation:
show <- restab[unlist(off_target_list),][which(restab[unlist(off_target_list),]$FDR < alpha),]
# different colors for different mismatches:
g <- g +
geom_point(
data = restab[unlist(off_target_list[3]),],
aes(x = logFC, y = -log10(FDR)),
color = "darkblue",
cex = pointsize) +
geom_point(
data = restab[unlist(off_target_list[2]),],
aes(x = logFC, y = -log10(FDR)),
color = "blue",
cex = pointsize) +
#zero mismatches:
geom_point(
data = restab[unlist(off_target_list[1]),],
aes(x = logFC, y = -log10(FDR)),
color = "cyan",
cex = pointsize) #+
#   geom_label_repel(
#    data = show ,
#    aes(x = logFC, y = -log10(FDR),
#        label = rownames(show)),
#    hjust = 0.1,
#    vjust = 2,
#   size = 4, segment.alpha = 0.5,min.segment.length=0, segment.color = "black")
}
# show the sign. genes:
if(show_sig){
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
top_up <- restab[ which(restab$FDR < alpha & restab$logFC > minlogfc),]
top_down <- restab[ which(restab$FDR < alpha & restab$logFC < -(minlogfc)),]
if (length(rownames(top_up)) > 0 && (length(rownames(top_up)) > 3)){
logFC.scaled <- range01(top_up$logFC)
FDR.scaled <- range01(-log(top_up$FDR))
summ <- (logFC.scaled + FDR.scaled)
top_up <- top_up[order(-summ),][1:3,]
}
if (length(rownames(top_down))>0 && (length(rownames(top_down))> 3)){
logFC.scaled <- range01(-top_down$logFC)
FDR.scaled <- range01(-log(top_down$FDR))
summ <- (logFC.scaled + FDR.scaled)
top_down <- top_down[order(-summ),][1:3,]
}
top_peaks <- rbind(top_up, top_down)
top_peaks <- na.omit(top_peaks)
g <- g + geom_label_repel(
data = top_peaks ,
aes(x = logFC, y = -log10(FDR),
label = rownames(top_peaks)),
hjust = 0.1,
#vjust = 2,
size = 5, segment.alpha = 0.5, segment.color = "black", min.segment.length=unit(0, "cm"), parse = T)
}
g <- g + geom_point(
data = restab[targetgene,],
aes(x = logFC, y = -log10(FDR)),
color = "red",
cex = pointsize)
g
}
startot <- read.delim("../data/off_targets_search/pna_2mm_startregions.tab")
eggnogg <- read.delim("../data/reference_sequences/eggnogg_output.tsv" ,sep = "\t",
header = T,row.names = 1, comment.char = "#")
idx_names <- data.frame(cbind(rownames(eggnogg), eggnogg[,5]),row.names = rownames(eggnogg))
colnames(idx_names) = c("locus_tag", "gene")
idx_names$gene <- ifelse(idx_names$gene=="", idx_names$locus_tag, idx_names$gene)
idx_names$gene <- ifelse(isUnique(idx_names$gene), idx_names$gene, idx_names$locus_tag)
alt_names <- sapply(rownames(all_res_tmm$acpP_vs_ctrl), function (x) {
if (x %in% idx_names$locus_tag) {
x <- idx_names[x,]$gene
} else {
x <- x
}
})
alt_names["ECP_3718"] = "kbl"
alt_names["ECP_0710"] = "pgm"
alt_names["ECP_0826"] = "dps"
alt_names["ECP_0104"] = "coaE"
alt_names["ECP_0027"] = "ispH"
list_ot_0 <- list()
list_ot_1 <- list()
list_ot_2 <- list()
for (resname in names(all_res_tmm)){
# adjust p-values FDR
all_res_tmm[[resname]]$table$FDR <- p.adjust(all_res_tmm[[resname]]$table$PValue, method = "fdr")
restab <- all_res_tmm[[resname]]$table
restab$locus_tag <- rownames(restab)
#rownames(restab) <- make.unique(alt_names)
hist(restab$PValue, breaks=100, main=resname)
# check for off-targets (with 0 mismatches):
targetgene <- gsub("_.*", "" , resname)
offt_zero_mm <- startot %>% filter(grepl(targetgene, probe_id) & num_mismatch==0) %>%
select(trans_id) %>% unlist
list_ot_0[[targetgene]] <- offt_zero_mm
offt_one_mm <- startot %>% filter(grepl(targetgene, probe_id) & num_mismatch==1) %>%
select(trans_id) %>% unlist
list_ot_1[[targetgene]] <- offt_one_mm
offt_two_mm <- startot %>% filter(grepl(targetgene, probe_id) & num_mismatch==2) %>%
select(trans_id) %>% unlist
list_ot_2[[targetgene]] <- offt_two_mm
off_targets <- list(zero = offt_zero_mm, one = offt_one_mm, two = offt_two_mm)
tgene_lt <- gsub(".*(ECP_.+)", "\\1", startot[grepl(targetgene, startot$probe_id),4][1])
# make volcanos:
pdf(paste0("../analysis/volcanoplots_bc/",resname, ".pdf"))
print(do_volcano(restab, tgene_lt, title=resname, show_sig = T,
x_limit = 9,
y_limit = 26,
alpha=0.001, pointsize = 3,
off_target_list = off_targets))
dev.off()
oneofft <- ifelse(rownames(restab) %in% offt_one_mm, "1 mm off targets", "other genes")
zeroofft <- ifelse(rownames(restab) %in% offt_zero_mm, "0 mm off targets", oneofft)
marktarget <- ifelse(rownames(restab) %in% tgene_lt, targetgene, zeroofft)
#markers <- ifelse(marktarget %in% targetgene, marktarget, zeroofft)
svg(paste0("../analysis/md_plots/",resname, ".svg"))
plotMD(all_res_tmm[[resname]], status = marktarget )
dev.off()
svg(paste0("../analysis/volcanoplots_bc/",resname, ".svg"))
print(do_volcano(restab, tgene_lt, title=resname,
x_limit = 9,
y_limit = 26,
alpha=0.001, pointsize = 3,
off_target_list = off_targets))
dev.off()
#pval distributions:
pdf(paste0("../analysis/volcanoplots_bc/",resname, "_pdistr.pdf"))
hist(restab$PValue, breaks=100, main=resname)
dev.off()
#save result_table:
dataname <- paste("../analysis/diff_exp_rawdata/", resname, ".csv", sep = "")
write.csv(restab[order(restab$FDR),], dataname)
}
de_tmm_adj <- lapply(all_res_tmm, function(x) dim(x$table[x$table$FDR < 0.001 & abs(x$table$logFC) > 1,]))
de_tmm_adj_up <- lapply(all_res_tmm, function(x) rownames(x$table[x$table$FDR < 0.001 & x$table$logFC > 1,]))
de_tmm_adj_down <- lapply(all_res_tmm, function(x) rownames(x$table[x$table$FDR < 0.001 & x$table$logFC < -1,]))
library(UpSetR)
svg(paste0("../analysis/upset_plots/upset_up.svg"))
print(upset(fromList(de_tmm_adj_up),sets = names(de_tmm_adj_up), order.by = "freq"))
dev.off()
svg(paste0("../analysis/upset_plots/upset_down.svg"))
print(upset(fromList(de_tmm_adj_down),sets = names(de_tmm_adj_down), order.by = "freq"))
dev.off()
resname
y$counts["ryfA_tp1",]
cpm(y)["ryfA_tp1",]
logCPM <- cpm(y, prior.count = 2, log = TRUE)
logCPM <- t(scale(t(logCPM))) #centered around 0
targets <- c(acpP="ECP_1086", csrA="ECP_2656", rplS="ECP_2607", rpsH="ECP_3394",
nusG="ECP_4195", rnpA="ECP_3905", adk="ECP_0535", yidC="ECP_3906",
pyrH="ECP_0179", rpoD="ECP_3157", ftsZ="ECP_0097", dnaB="ECP_4268",
tnaB="ECP_3909")
targets <- sort(targets)
# get logchange df:
#t <- data.frame(gname = names(targets),lt = targets, row.names = targets)
rn <- rownames(all_res_tmm$acpP_vs_ctrl)
rn[rn %in% targets] <- names(targets)
#rn <- ifelse(rn %in% t$lt, t[t$lt,], rn)
logchange <- data.frame(lapply(all_res_tmm, function(x) x$table$logFC),
row.names = rn)
# get pvalues df:
pvals <- data.frame(lapply(all_res_tmm, function(x) x$table$FDR),
row.names = rn)
pvals <- ifelse(pvals<0.001 & abs(logchange) > 1, "*", " ")
rownames(logCPM) <- rn
logchange_ordered <- logchange[order(logchange[,1]),]
logCPM_ordered <- logCPM[order(logchange[,1]),]
pvals_ordered <- pvals[order(logchange[,1]),]
topDEgenes <- unique(unlist(lapply(all_res_tmm, function(x) rownames(topTags(x, n=10)))))
topDEgenes[topDEgenes %in% targets] <- names(targets)
hm_high_de <- list(cpm = logCPM_ordered[rownames(logCPM_ordered) %in% topDEgenes,],
fc = logchange_ordered[rownames(logchange_ordered) %in% topDEgenes,],
pvals_ordered = pvals_ordered[rownames(pvals_ordered) %in% topDEgenes,])
# add genes:
rownames(hm_high_de$fc) <- sapply(rownames(hm_high_de$fc), function (x) {
if (x %in% names(alt_names)) {
x <- alt_names[x]
} else {
x <- x
}
})
ht_high_de <- Heatmap(hm_high_de$fc, name = "Log2 FC",
col = circlize::colorRamp2(c(-2, 0, 2), c("darkblue", "white", "orange")),
cluster_rows = F, cluster_columns = F, show_heatmap_legend = T,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", as.matrix(hm_high_de$pvals_ordered)[i, j]), x, y, gp = gpar(fontsize = 10))
}, show_row_names = T, border = TRUE, row_names_gp = gpar(fontsize =9),
column_names_gp = gpar(fontsize = 9),
column_names_max_height=max_text_width(colnames(hm_high_de),gp = gpar(fontsize = 9)),
width = unit(15, "cm"), height = unit(40, "cm"), row_dend_width = unit(6, "cm"), column_names_rot = 45)#,
#column_dend_height = unit(3, "cm"), column_title_gp = gpar(fontsize = 40),
#show_row_dend = F, show_column_dend = F, column_names_rot = 45)
svg("../analysis/hm_high_de.svg", width = 12, height = 30)
draw(ht_high_de)
dev.off()
topDEgenes
rownames(logCPM)
rownames(all_res_tmm$acpP_vs_ctrl)
rownames(all_res_tmm$acpP_vs_ctrl)[!grepl("ECP", rownames(all_res_tmm$acpP_vs_ctrl))]
rownames(logchange)
rownames(logchange)[!grepl("ECP", rownames(logchange)]
rownames(logchange)[!grepl("ECP", rownames(logchange))]
rownames(logchange_ordered)[!grepl("ECP", rownames(logchange_ordered))]
logCPM <- cpm(y, prior.count = 2, log = TRUE)
logCPM <- t(scale(t(logCPM))) #centered around 0
targets <- c(acpP="ECP_1086", csrA="ECP_2656", rplS="ECP_2607", rpsH="ECP_3394",
nusG="ECP_4195", rnpA="ECP_3905", adk="ECP_0535", yidC="ECP_3906",
pyrH="ECP_0179", rpoD="ECP_3157", ftsZ="ECP_0097", dnaB="ECP_4268",
tnaB="ECP_3909")
targets <- sort(targets)
# get logchange df:
#t <- data.frame(gname = names(targets),lt = targets, row.names = targets)
rn <- rownames(all_res_tmm$acpP_vs_ctrl)
rn[rn %in% targets] <- names(targets)
#rn <- ifelse(rn %in% t$lt, t[t$lt,], rn)
logchange <- data.frame(lapply(all_res_tmm, function(x) x$table$logFC),
row.names = rn)
# get pvalues df:
pvals <- data.frame(lapply(all_res_tmm, function(x) x$table$FDR),
row.names = rn)
pvals <- ifelse(pvals<0.001 & abs(logchange) > 1, "*", " ")
#rownames(logCPM) <- rn
logchange_ordered <- logchange[order(logchange[,1]),]
logCPM_ordered <- logCPM[order(logchange[,1]),]
pvals_ordered <- pvals[order(logchange[,1]),]
rownames(logchange)[!grepl("ECP", rownames(logchange))]
logCPM <- cpm(y, prior.count = 2, log = TRUE)
logCPM <- t(scale(t(logCPM))) #centered around 0
targets <- c(acpP="ECP_1086", csrA="ECP_2656", rplS="ECP_2607", rpsH="ECP_3394",
nusG="ECP_4195", rnpA="ECP_3905", adk="ECP_0535", yidC="ECP_3906",
pyrH="ECP_0179", rpoD="ECP_3157", ftsZ="ECP_0097", dnaB="ECP_4268",
tnaB="ECP_3909")
targets <- sort(targets)
# get logchange df:
#t <- data.frame(gname = names(targets),lt = targets, row.names = targets)
rn <- rownames(all_res_tmm$acpP_vs_ctrl)
rn[rn %in% targets] <- names(targets)
#rn <- ifelse(rn %in% t$lt, t[t$lt,], rn)
rn <- rownames(all_res_tmm$acpP_vs_ctrl)
logchange <- data.frame(lapply(all_res_tmm, function(x) x$table$logFC),
row.names = rn)
# get pvalues df:
pvals <- data.frame(lapply(all_res_tmm, function(x) x$table$FDR),
row.names = rn)
pvals <- ifelse(pvals<0.001 & abs(logchange) > 1, "*", " ")
rownames(logCPM) <- rn
logchange_ordered <- logchange[order(logchange[,1]),]
logCPM_ordered <- logCPM[order(logchange[,1]),]
pvals_ordered <- pvals[order(logchange[,1]),]
logchange_ordered <- logchange[order(logchange[,1]),]
logCPM_ordered <- logCPM[order(logchange[,1]),]
pvals_ordered <- pvals[order(logchange[,1]),]
logchange_ordered
srnas <- rownames(logchange_ordered)[!grepl("ECP", rownames(logchange_ordered))]
srnas
srnas <- rownames(logchange_ordered)[!grepl("ECP", rownames(logchange_ordered))]
hm_high_de <- list(cpm = logCPM_ordered[srnas,],
fc = logchange_ordered[srnas,],
pvals_ordered = pvals_ordered[srnas,])
hm_high_de
hm_srnas <- list(cpm = logCPM_ordered[srnas,],
fc = logchange_ordered[srnas,],
pvals_ordered = pvals_ordered[srnas,])
ht_srnas <- Heatmap(hm_srnas$fc, name = "Log2 FC",
col = circlize::colorRamp2(c(-2, 0, 2), c("darkblue", "white", "orange")),
cluster_rows = F, cluster_columns = F, show_heatmap_legend = T,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", as.matrix(hm_high_de$pvals_ordered)[i, j]), x, y, gp = gpar(fontsize = 10))
}, show_row_names = T, border = TRUE, row_names_gp = gpar(fontsize =9),
column_names_gp = gpar(fontsize = 9),
column_names_max_height=max_text_width(colnames(hm_high_de),gp = gpar(fontsize = 9)),
width = unit(15, "cm"), height = unit(40, "cm"), row_dend_width = unit(6, "cm"), column_names_rot = 45)#,
ht_srnas
ht_srnas <- Heatmap(t(hm_srnas$fc), name = "Log2 FC",
col = circlize::colorRamp2(c(-2, 0, 2), c("darkblue", "white", "orange")),
cluster_rows = F, cluster_columns = F, show_heatmap_legend = T,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", as.matrix(hm_high_de$pvals_ordered)[i, j]), x, y, gp = gpar(fontsize = 10))
}, show_row_names = T, border = TRUE, row_names_gp = gpar(fontsize =9),
column_names_gp = gpar(fontsize = 9),
column_names_max_height=max_text_width(colnames(hm_high_de),gp = gpar(fontsize = 9)),
width = unit(15, "cm"), height = unit(40, "cm"), row_dend_width = unit(6, "cm"), column_names_rot = 45)#,
ht_srnas
ht_srnas <- Heatmap(t(hm_srnas$fc), name = "Log2 FC",
col = circlize::colorRamp2(c(-2, 0, 2), c("darkblue", "white", "orange")),
cluster_rows = F, cluster_columns = F, show_heatmap_legend = T,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", as.matrix(hm_high_de$pvals_ordered)[i, j]), x, y, gp = gpar(fontsize = 10))
}, show_row_names = T, border = TRUE, row_names_gp = gpar(fontsize =9),
column_names_gp = gpar(fontsize = 9),
column_names_max_height=max_text_width(colnames(hm_high_de),gp = gpar(fontsize = 9)),
width = unit(40, "cm"), height = unit(15, "cm"), row_dend_width = unit(6, "cm"), column_names_rot = 45)#,
ht_srnas
ht_srnas
grid.text(sprintf("%.1s", as.matrix(t(hm_high_de$pvals_ordered))[i, j]), x, y, gp = gpar(fontsize = 10))
ht_srnas <- Heatmap(t(hm_srnas$fc), name = "Log2 FC",
col = circlize::colorRamp2(c(-2, 0, 2), c("darkblue", "white", "orange")),
cluster_rows = F, cluster_columns = F, show_heatmap_legend = T,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", as.matrix(t(hm_high_de$pvals_ordered))[i, j]), x, y, gp = gpar(fontsize = 10))
}, show_row_names = T, border = TRUE, row_names_gp = gpar(fontsize =9),
column_names_gp = gpar(fontsize = 9),
column_names_max_height=max_text_width(colnames(hm_high_de),gp = gpar(fontsize = 9)),
width = unit(40, "cm"), height = unit(15, "cm"), row_dend_width = unit(6, "cm"), column_names_rot = 45)#,
ht_srnas
svg("../analysis/hm_srnas.svg", width = 30, height = 12)
draw(ht_srnas)
dev.off()
ht_srnas <- Heatmap(t(hm_srnas$fc), name = "Log2 FC",
col = circlize::colorRamp2(c(-2, 0, 2), c("darkblue", "white", "orange")),
cluster_rows = F, cluster_columns = F, show_heatmap_legend = T,
cell_fun = function(j, i, x, y, width, height, fill) {
grid.text(sprintf("%.1s", as.matrix(t(hm_high_de$pvals_ordered))[i, j]), x, y, gp = gpar(fontsize = 10))
}, show_row_names = T, border = TRUE, row_names_gp = gpar(fontsize =9),
column_names_gp = gpar(fontsize = 9),
column_names_max_height=max_text_width(colnames(hm_high_de),gp = gpar(fontsize = 9)),
width = unit(40, "cm"), height = unit(12, "cm"), row_dend_width = unit(6, "cm"), column_names_rot = 45)#,
#column_dend_height = unit(3, "cm"), column_title_gp = gpar(fontsize = 40),
#show_row_dend = F, show_column_dend = F, column_names_rot = 45)
svg("../analysis/hm_srnas.svg", width = 30, height = 12)
draw(ht_srnas)
dev.off()
restab
offt_zero_mm
y$genes
y$genes[order(y$genes)]
y$genes$Length[order(y$genes$Length)]
y$genes[order(y$genes$Length)]
y$genes[order(y$genes$Length),]
y$counts[order(y$genes$Length),]
gwc[order(gwc$Length),]
gwc[order(gwc$Length),1:5]
gwc[order(gwc$Length),1:5][1:100,]
gwc[order(gwc$Length),1:5][1:1000,]
tail(gwc[order(gwc$Length),1:5])
tail(gwc[order(gwc$Length),1:5], x=100)
tail(gwc[order(gwc$Length),1:5],n=100)
head(gwc[order(gwc$Length),1:5],n=100)
