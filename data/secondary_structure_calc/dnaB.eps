%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.18
%%CreationDate: Thu Dec 16 09:31:54 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUUUCGACCCAUUCUUUAUCUCGGUAACUCCAUUCACUAUGGCAGGAAAUAAACCCUUCAACAAACAGCAGGCUGAACCCCGCGAACGCG\
) } def
/len { sequence length } bind def

/coor [
[78.66928101 128.64089966]
[85.48636627 115.27661896]
[72.01930237 121.88253021]
[58.55223465 128.48844910]
[45.08516312 135.09436035]
[31.73158836 141.92677307]
[18.49531174 148.98376465]
[5.25903606 156.04074097]
[-7.97723961 163.09771729]
[-6.85572910 178.28529358]
[-12.01462555 192.61378479]
[-22.56011963 203.60069275]
[-36.66514206 209.34249878]
[-51.88591003 208.84437561]
[-65.58533478 202.19264221]
[-75.38990784 190.53973389]
[-79.60092163 175.90458679]
[-77.48880768 160.82286072]
[-69.41948700 147.90751648]
[-56.79102707 139.39624023]
[-41.79138184 136.76364136]
[-27.01933289 140.46586609]
[-15.03422165 149.86145020]
[-1.79794598 142.80445862]
[11.43832970 135.74748230]
[24.67460632 128.69050598]
[29.18808174 122.64147949]
[38.47925186 121.62728882]
[51.94631958 115.02136993]
[65.41339111 108.41545868]
[78.88045502 101.80954742]
[82.88496399 87.35396576]
[74.73664093 74.76012421]
[66.58831024 62.16628647]
[58.43998718 49.57244492]
[43.11762619 44.81799698]
[37.41592026 29.82232666]
[45.70872879 16.08883286]
[61.63452148 14.15267563]
[72.97638702 25.49910927]
[71.03382874 41.42412186]
[79.18215179 54.01795959]
[87.33047485 66.61180115]
[95.47880554 79.20563507]
[110.42601013 77.94030762]
[125.37188721 76.67510986]
[131.28721619 62.89073944]
[137.20256042 49.10637283]
[129.14775085 35.84365463]
[130.46044922 20.38220406]
[140.63591003 8.66726494]
[155.76144409 5.20347071]
[170.02098083 11.32272053]
[177.93144226 24.67203712]
[176.45108032 40.11833572]
[166.14915466 51.72220230]
[150.98692322 55.02170944]
[145.07159424 68.80607605]
[139.15625000 82.59044647]
[150.95602417 73.32949066]
[159.38609314 60.92247009]
[173.09448242 54.83312607]
[187.95199585 56.89567566]
[199.48330688 66.48883820]
[204.21499634 80.72299194]
[200.72178650 95.31056976]
[190.05590820 105.85755157]
[175.43008423 109.18700409]
[161.24937439 104.29570007]
[146.25355530 103.94175720]
[159.24392700 111.44175720]
[175.06387329 111.64114380]
[182.21737671 124.70547485]
[195.20774841 132.20547485]
[210.40673828 127.87344360]
[224.17643738 135.63044739]
[228.34751892 150.87437439]
[220.44537354 164.56129456]
[205.15820312 168.57098389]
[191.55558777 160.52458191]
[187.70774841 145.19586182]
[174.71737671 137.69586182]
[159.82658386 138.03291321]
[151.74392700 124.43213654]
[138.75355530 116.93213654]
[144.72708130 130.69137573]
[144.16638184 145.68089294]
[137.18159485 158.95541382]
[125.14516449 167.90663147]
[110.42211151 170.77575684]
[95.90535736 166.99900818]
[84.44727325 157.31851196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 31]
[3 30]
[4 29]
[5 28]
[6 26]
[7 25]
[8 24]
[9 23]
[32 44]
[33 43]
[34 42]
[35 41]
[46 59]
[47 58]
[48 57]
[70 85]
[71 84]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 1 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.99744
  0.33593
  0.37919
  0.37827
  0.34677
  0.33009
  0.39747
  0.39894
  0.35806
  0.74223
  0.60520
  0.85479
  0.76187
  0.75800
  0.97193
  0.96599
  0.98513
  0.97169
  0.96969
  0.81443
  0.78808
  0.96295
  0.35806
  0.39894
  0.39747
  0.33009
  0.66300
  0.34677
  0.37827
  0.37919
  0.33593
  0.72815
  0.74284
  0.73920
  0.71962
  0.97456
  0.97430
  0.97905
  0.98678
  0.98739
  0.71962
  0.73920
  0.74284
  0.72815
  0.97913
  0.46507
  0.52346
  0.52474
  0.65964
  0.68503
  0.83290
  0.83988
  0.99054
  0.99121
  0.98065
  0.96543
  0.52474
  0.52346
  0.46507
  0.72408
  0.72556
  0.90393
  0.99372
  0.98771
  0.97859
  0.97825
  0.97897
  0.69367
  0.69784
  0.32890
  0.33247
  0.97022
  0.32370
  0.31886
  0.58046
  0.56901
  0.56230
  0.86760
  0.92389
  0.89299
  0.31886
  0.32370
  0.50650
  0.33247
  0.32890
  0.77123
  0.77241
  0.81499
  0.88936
  0.43168
  0.42685
  0.59696
] def

/invert true def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
