%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAAUAACAAAAAUAGCCUUCCUCUAAAGGUGGCAUCAUGACUGAUCAAUCAGAAAAAAAACACUCUGCAUUUUGGGGUGUUAUGGUUA\
) } def
/len { sequence length } bind def

/coor [
[158.85121155 141.78877258]
[161.62385559 156.53028870]
[160.43772888 171.48332214]
[155.37570190 185.60337830]
[146.79135132 197.90414429]
[135.28430176 207.52639771]
[121.65833282 213.79801941]
[106.86525726 216.28091431]
[91.93836975 214.80166626]
[77.92034912 209.46359253]
[65.79036713 200.63955688]
[56.39571381 188.94595337]
[50.39262390 175.19956970]
[48.20041656 160.36062622]
[49.97222519 145.46563721]
[55.58428574 131.55503845]
[64.64459229 119.60050201]
[76.52025604 110.43707275]
[90.37921906 104.70549774]
[76.14501190 99.97396851]
[61.91080856 95.24243927]
[49.91589737 100.33891296]
[38.07275391 95.95323181]
[32.64935303 84.99650574]
[18.58307076 79.78693390]
[4.51678944 74.57735443]
[-11.54923630 77.86594391]
[-22.22633743 65.41879272]
[-16.53082657 50.04046249]
[-0.32175842 47.55085373]
[9.72636795 60.51107025]
[23.79265022 65.72064972]
[37.85893250 70.93022919]
[54.86583328 66.97769928]
[66.64234161 81.00823212]
[80.87654877 85.73976135]
[95.11074829 90.47129059]
[110.10219574 89.96467590]
[123.98450470 84.28299713]
[137.86680603 78.60131073]
[151.74911499 72.91962433]
[165.63142395 67.23794556]
[179.51373291 61.55625916]
[193.39604187 55.87457657]
[207.27835083 50.19289398]
[211.06529236 35.26087570]
[222.78160095 25.53557396]
[237.80029297 24.58531570]
[250.34848022 32.56536484]
[264.23077393 26.88368034]
[278.11309814 21.20199585]
[291.99539185 15.52031326]
[303.69351196 -2.26400971]
[324.01748657 0.56535196]
[337.25378418 -6.49163008]
[350.49005127 -13.54861259]
[363.72631836 -20.60559464]
[364.16485596 -35.95822525]
[372.23461914 -49.02630234]
[385.76486206 -56.29457474]
[401.11605835 -55.80792236]
[414.15875244 -47.69724274]
[421.38458252 -34.14427185]
[420.84982300 -18.79469490]
[412.69830322 -5.77746391]
[399.12274170 1.40584719]
[383.77493286 0.82296485]
[370.78329468 -7.36931849]
[357.54702759 -0.31233644]
[344.31076050 6.74464560]
[331.07449341 13.80162811]
[329.83413696 22.95627403]
[324.33843994 30.55515480]
[315.78158569 34.72226715]
[306.13137817 34.35280991]
[297.67709351 29.40262032]
[283.79476929 35.08430481]
[269.91247559 40.76598740]
[256.03015137 46.44766998]
[252.67753601 60.93552399]
[241.30216980 70.78768921]
[226.12931824 72.06745911]
[212.96003723 64.07520294]
[199.07772827 69.75688934]
[185.19541931 75.43856812]
[171.31311035 81.12025452]
[157.43080139 86.80193329]
[143.54849243 92.48361969]
[129.66618347 98.16529846]
[115.78387451 103.84698486]
[130.00051880 108.63103485]
[142.46733093 116.97241211]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 37]
[20 36]
[21 35]
[24 33]
[25 32]
[26 31]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[49 79]
[50 78]
[51 77]
[52 76]
[54 71]
[55 70]
[56 69]
[57 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
