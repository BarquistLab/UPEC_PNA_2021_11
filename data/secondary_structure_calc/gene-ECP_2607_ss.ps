%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCGAGAUAUCAGUUUACCCAGGAUAAGAGAUUAAAUUAUGAGCAACAUUAUUAAGCAACUUGAACAAGAGCAGAUGAAGCAGGACGUAC\
) } def
/len { sequence length } bind def

/coor [
[106.90645599 351.34133911]
[111.44287109 336.59600830]
[123.24578857 326.66149902]
[121.22511292 311.79821777]
[111.84383392 300.22924805]
[117.65156555 285.51257324]
[104.46655273 278.63555908]
[97.78015137 265.15386963]
[100.34436035 250.14457703]
[111.38239288 239.39898682]
[109.36171722 224.53570557]
[107.34104919 209.67243958]
[105.32037354 194.80915833]
[95.93909454 183.24020386]
[101.74682617 168.52351379]
[99.72615051 153.66024780]
[97.70548248 138.79696655]
[95.68480682 123.93370056]
[85.98113251 119.87245178]
[78.90029907 112.09319305]
[75.76707458 102.05138397]
[77.16767120 91.62577057]
[82.84004974 82.76692200]
[91.72293854 77.13227081]
[80.45858765 66.37345123]
[80.15837097 51.16278076]
[90.48468018 40.49024582]
[89.97806549 25.49880600]
[89.47145844 10.50736237]
[88.96484375 -4.48407984]
[74.88518524 -13.67717171]
[69.04530334 -29.26973152]
[73.53213501 -45.13280869]
[86.41381836 -55.15390015]
[85.40116882 -70.11968231]
[84.38852692 -85.08545685]
[83.37587738 -100.05123901]
[72.19046021 -107.77353668]
[67.62479401 -120.36782837]
[71.15840149 -133.08654785]
[81.26210785 -141.27404785]
[80.75549316 -156.26548767]
[80.24888611 -171.25692749]
[69.55704498 -183.21786499]
[72.38417816 -199.00985718]
[86.56155396 -206.51863098]
[101.21349335 -199.98410034]
[105.10029602 -184.41900635]
[95.24032593 -171.76354980]
[95.74694061 -156.77209473]
[96.25354767 -141.78065491]
[108.98831940 -130.94017029]
[110.06319427 -113.91512299]
[98.34165955 -101.06388855]
[99.35430145 -86.09810638]
[100.36695099 -71.13232422]
[101.37959290 -56.16654968]
[113.38638306 -50.07352066]
[120.83026123 -38.72354889]
[121.64742279 -25.06579399]
[115.51310730 -12.71408367]
[103.95628357 -4.99069166]
[104.46289825 10.00075054]
[104.96951294 24.99219322]
[105.47612000 39.98363495]
[116.49937439 49.93469238]
[117.22670746 65.13092804]
[106.71438599 76.62565613]
[121.49610138 88.62632751]
[123.10213470 107.59830475]
[110.54808044 121.91302490]
[112.56875610 136.77630615]
[114.58942413 151.63957214]
[116.61009979 166.50283813]
[126.13591766 179.13491821]
[120.18364716 192.78848267]
[122.20432281 207.65176392]
[124.22499084 222.51502991]
[126.24566650 237.37831116]
[139.75180054 244.78710938]
[146.22991943 258.56707764]
[143.38537598 273.34451294]
[132.51483154 283.49188232]
[142.04064941 296.12396240]
[136.08839417 309.77752686]
[138.10905457 324.64080811]
[152.13578796 331.06378174]
[160.44407654 344.06283569]
[160.38275146 359.49008179]
[151.97142029 372.42272949]
[137.89407349 378.73397827]
[122.64276123 376.40997314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 86]
[4 85]
[6 83]
[10 79]
[11 78]
[12 77]
[13 76]
[15 74]
[16 73]
[17 72]
[18 71]
[24 68]
[27 65]
[28 64]
[29 63]
[30 62]
[34 57]
[35 56]
[36 55]
[37 54]
[41 51]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
