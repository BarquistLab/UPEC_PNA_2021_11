%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGUAAUUGUCACCAAUUGAAUCACGGGAGUAAAGACAGAUGAGCAUGCAAGAUCCGAUCGCGGAUAUGCUGACCCGUAUCCGUAACGGUC\
) } def
/len { sequence length } bind def

/coor [
[89.44269562 137.37931824]
[84.38433838 135.56431580]
[75.81531525 147.87576294]
[67.24629211 160.18722534]
[58.67726898 172.49867249]
[62.94143677 187.54364014]
[56.49013901 201.78845215]
[42.36947632 208.50715637]
[27.24679947 204.52737427]
[18.26256943 191.72825623]
[19.65886879 176.15312195]
[30.77640343 165.15611267]
[46.36581802 163.92964172]
[54.93484116 151.61819458]
[63.50386429 139.30674744]
[72.07288361 126.99529266]
[65.70727539 118.23947906]
[62.00533676 108.06692505]
[61.25461960 97.26777649]
[63.51343155 86.68084717]
[68.60632324 77.12847900]
[76.13769531 69.35264587]
[85.52257538 63.95733643]
[96.03197479 61.36162186]
[106.84958649 61.76712418]
[112.29599762 47.79083633]
[117.74240112 33.81454849]
[123.18881226 19.83825874]
[128.63522339 5.86197090]
[115.26454926 12.66088676]
[100.27348328 13.17832088]
[86.46585083 7.31749630]
[76.42415619 -3.82541227]
[72.02654266 -18.16629791]
[74.09552002 -33.02292633]
[82.24411011 -45.61659241]
[94.94824982 -53.59185410]
[109.83183289 -55.45706177]
[124.11111450 -50.86335754]
[135.11538696 -40.66992188]
[140.78645325 -26.78327751]
[140.06404114 -11.80211067]
[144.22236633 -27.06706429]
[158.66268921 -30.71758652]
[169.17935181 -41.41338348]
[179.69599915 -52.10918045]
[190.21264648 -62.80497742]
[200.72929382 -73.50077057]
[201.49331665 -77.71156311]
[203.31080627 -81.17998505]
[205.84405518 -83.67714691]
[208.71701050 -85.09870911]
[211.55638123 -85.46687317]
[214.03073120 -84.91967773]
[226.19569397 -93.69541168]
[238.36067200 -102.47115326]
[250.52563477 -111.24688721]
[262.69061279 -120.02262115]
[268.91409302 -135.19497681]
[285.19949341 -137.12301636]
[294.79382324 -123.82333374]
[287.82720947 -108.97751617]
[271.46633911 -107.85765076]
[259.30136108 -99.08191681]
[247.13639832 -90.30618286]
[234.97143555 -81.53044891]
[222.80645752 -72.75470734]
[211.42509460 -62.98412323]
[200.90844727 -52.28832626]
[190.39179993 -41.59252930]
[179.87513733 -30.89673424]
[169.35848999 -20.20093727]
[165.95237732 -5.70101738]
[150.75984192 -1.28546023]
[142.61151123 11.30837917]
[137.16510010 25.28466797]
[131.71868896 39.26095581]
[126.27228546 53.23724365]
[120.82587433 67.21353149]
[136.23066711 85.99968719]
[137.46116638 110.26309204]
[124.03598022 130.51133728]
[130.86839294 143.86491394]
[137.70082092 157.21849060]
[150.29814148 168.56501770]
[142.88233948 183.81106567]
[126.17920685 180.90559387]
[124.34724426 164.05090332]
[117.51482391 150.69732666]
[110.68240356 137.34375000]
[105.42565155 138.46078491]
[100.06502533 138.84153748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[42 74]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
