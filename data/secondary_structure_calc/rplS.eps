%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.18
%%CreationDate: Thu Dec 16 09:30:09 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCGAGAUAUCAGUUUACCCAGGAUAAGAGAUUAAAUUAUGAGCAACAUUAUUAAGCAACUUGAACAAGAGCAGAUGAAGCAGGACGUAC\
) } def
/len { sequence length } bind def

/coor [
[91.60031891 270.93334961]
[90.09439087 255.64848328]
[96.44727325 241.66503906]
[108.95008087 232.74453735]
[107.43255615 217.82148743]
[92.61026001 211.63015747]
[82.82936859 198.77056885]
[80.79747772 182.64834595]
[87.15425873 167.59237671]
[100.27433014 157.69241333]
[98.25366211 142.82914734]
[96.23298645 127.96587372]
[94.21231842 113.10260010]
[85.80661774 101.92959595]
[90.92441559 88.91807556]
[88.90373993 74.05480194]
[86.88307190 59.19152832]
[84.86239624 44.32825470]
[68.75552368 36.38824081]
[60.56806946 20.57958221]
[63.32848358 3.14831734]
[75.77976990 -9.14000320]
[72.76029205 -23.83295250]
[69.74081421 -38.52590179]
[66.72133636 -53.21884918]
[51.69696426 -52.65488815]
[36.78469849 -54.57169724]
[22.39135742 -58.91698837]
[8.90960026 -65.57221985]
[-3.29277921 -74.35582733]
[-13.88289070 -85.02819824]
[-22.57182884 -97.29817200]
[-29.12255287 -110.83101654]
[-33.35635376 -125.25754547]
[-35.15773392 -140.18418884]
[-34.47754288 -155.20375061]
[-31.33434296 -169.90647888]
[-25.81388092 -183.89126587]
[-18.06676102 -196.77661133]
[-8.30432701 -208.21098328]
[3.20709276 -217.88243103]
[16.15345955 -225.52713013]
[30.18158531 -230.93653870]
[44.90877151 -233.96304321]
[59.93325424 -234.52410889]
[74.84515381 -232.60443115]
[89.23765564 -228.25636292]
[102.71813202 -221.59854126]
[114.91881561 -212.81257629]
[125.50687408 -202.13816833]
[134.19345093 -189.86653137]
[140.74156189 -176.33241272]
[144.97257996 -161.90507507]
[146.77108765 -146.97807312]
[146.08801270 -131.95864868]
[142.94197083 -117.25652313]
[137.41882324 -103.27279663]
[129.66921997 -90.38895416]
[119.90457916 -78.95646667]
[108.39129639 -69.28722382]
[95.44345856 -61.64501953]
[81.41429138 -56.23832703]
[84.43376923 -41.54537964]
[87.45324707 -26.85243034]
[90.47272491 -12.15948105]
[102.36368561 -8.74873924]
[111.67642975 -0.49576020]
[116.54883575 11.03332043]
[115.97055054 23.60939407]
[109.99176025 34.77132034]
[99.72566986 42.30758286]
[101.74633789 57.17085648]
[103.76701355 72.03412628]
[105.78768158 86.89739990]
[114.19338226 98.07040405]
[109.07558441 111.08192444]
[111.09626007 125.94519806]
[113.11692810 140.80847168]
[115.13760376 155.67175293]
[128.44017029 160.34541321]
[138.35195923 170.27941895]
[142.95195007 183.46670532]
[141.38415527 197.27796936]
[134.01628113 208.98594666]
[122.35559082 216.30397034]
[123.87311554 231.22700500]
[137.91567993 237.44812012]
[146.95335388 249.86648560]
[148.55508423 265.14163208]
[142.28997803 279.16461182]
[129.84335327 288.16333008]
[114.56325531 289.71716309]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 86]
[5 85]
[10 79]
[11 78]
[12 77]
[13 76]
[15 74]
[16 73]
[17 72]
[18 71]
[22 65]
[23 64]
[24 63]
[25 62]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 1 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.96428
  0.86125
  0.66374
  0.50550
  0.50857
  0.94316
  0.92220
  0.95730
  0.95901
  0.66010
  0.75652
  0.76913
  0.76462
  0.97659
  0.72960
  0.72546
  0.70306
  0.64115
  0.92559
  0.99720
  0.99416
  0.38872
  0.38914
  0.38602
  0.38111
  0.79496
  0.56089
  0.58491
  0.60698
  0.76177
  0.95822
  0.92275
  0.89484
  0.51031
  0.52677
  0.65930
  0.69669
  0.77062
  0.59500
  0.78378
  0.39830
  0.25741
  0.36054
  0.80929
  0.76436
  0.76522
  0.98418
  0.98460
  0.54719
  0.54553
  0.41197
  0.75659
  0.57866
  0.36625
  0.39793
  0.55706
  0.53930
  0.63785
  0.80321
  0.98181
  0.98562
  0.38111
  0.38602
  0.38914
  0.38872
  0.86808
  0.99245
  0.97606
  0.92875
  0.92439
  0.64115
  0.70306
  0.72546
  0.72960
  0.99105
  0.76462
  0.76913
  0.75652
  0.66010
  0.93650
  0.99617
  0.89243
  0.86669
  0.97304
  0.50857
  0.50550
  0.99540
  0.98581
  0.95477
  0.95779
  0.99149
  0.99965
] def

/invert true def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
