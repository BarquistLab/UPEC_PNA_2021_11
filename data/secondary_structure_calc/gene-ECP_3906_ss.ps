%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUCCCGCCCGGACCAUUUGAUACCAGAGAACACUAACGAUGGAUUCGCAACGCAAUCUUUUAGUCAUCGCUUUGCUGUUCGUGUCUUUCA\
) } def
/len { sequence length } bind def

/coor [
[8.38867283 297.15222168]
[-4.18099737 297.83065796]
[-16.30746651 294.54708862]
[-24.87648964 306.85855103]
[-33.44551468 319.16998291]
[-42.01453781 331.48144531]
[-40.61093140 347.46298218]
[-52.32954788 358.41989136]
[-68.18086243 355.94696045]
[-76.00510406 341.94119263]
[-69.80018616 327.14666748]
[-54.32598877 322.91241455]
[-45.75696564 310.60098267]
[-37.18794250 298.28952026]
[-28.61891937 285.97805786]
[-37.84173965 271.16384888]
[-39.81679916 253.77346802]
[-34.11743546 237.17063904]
[-21.80574036 224.58592224]
[-5.23494148 218.48814392]
[12.40031052 220.10015869]
[19.67984009 206.98495483]
[26.95936966 193.86976624]
[34.23889923 180.75456238]
[41.51842880 167.63935852]
[40.70572662 164.74870300]
[41.11273193 161.33267212]
[42.95769119 157.90431213]
[46.24930954 155.04963684]
[50.76693726 153.34510803]
[59.74687958 141.33009338]
[68.72682190 129.31507874]
[77.70676422 117.30006409]
[86.68670654 105.28504181]
[88.52650452 91.42478943]
[101.29827118 85.73500824]
[110.27821350 73.71999359]
[119.25816345 61.70497894]
[127.82718658 49.39352798]
[135.97550964 36.79969025]
[144.12384033 24.20584869]
[152.27215576 11.61201000]
[160.42048645 -0.98182935]
[167.02639771 -14.44889736]
[171.99766541 -28.60116005]
[176.96893311 -42.75342178]
[181.94018555 -56.90568542]
[186.67172241 -71.13989258]
[191.16217041 -85.45198059]
[190.13476562 -102.37477112]
[206.11180115 -108.04670715]
[215.98495483 -94.26422119]
[205.47425842 -80.96153259]
[200.98381042 -66.64944458]
[202.00648499 -59.17172623]
[196.09245300 -51.93442154]
[191.12118530 -37.78215790]
[186.14993286 -23.62989616]
[181.17866516 -9.47763348]
[195.26547241 -14.63144207]
[209.46307373 -9.79118252]
[217.46812439 2.89420533]
[215.72662354 17.79276657]
[205.01173401 28.28996086]
[190.08056641 29.72533035]
[177.56214905 21.46160889]
[173.01432800 7.16649628]
[164.86599731 19.76033592]
[156.71768188 32.35417557]
[148.56935120 44.94801331]
[140.42102051 57.54185486]
[140.58680725 62.50504684]
[137.49073792 67.58157349]
[131.27317810 70.68492126]
[122.29323578 82.69993591]
[113.31329346 94.71495819]
[111.47349548 108.57521057]
[98.70172882 114.26499176]
[89.72178650 126.28000641]
[80.74183655 138.29501343]
[71.76189423 150.31004333]
[62.78195190 162.32505798]
[54.63362885 174.91889954]
[47.35409927 188.03408813]
[40.07456970 201.14929199]
[32.79504013 214.26449585]
[25.51550865 227.37968445]
[33.84981537 237.04389954]
[38.73083878 248.80830383]
[39.68237686 261.48461914]
[36.62428665 273.79769897]
[29.87896538 284.51388550]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 15]
[4 14]
[5 13]
[6 12]
[21 87]
[22 86]
[23 85]
[24 84]
[25 83]
[30 82]
[31 81]
[32 80]
[33 79]
[34 78]
[36 76]
[37 75]
[38 74]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 59]
[45 58]
[46 57]
[47 56]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
