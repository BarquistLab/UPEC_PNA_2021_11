%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAUUCAUUUCAAUCGUUGACAGUCUCAGGAAAGAAACAUGGCUACCAAUGCAAAACCCGUCUAUAAACGCAUUCUGCUUAAGUUGAGUG\
) } def
/len { sequence length } bind def

/coor [
[127.98023987 147.60064697]
[119.34912109 151.48490906]
[110.21618652 153.82540894]
[100.85412598 154.56526184]
[91.54022217 153.69520569]
[82.54821777 151.25343323]
[74.14019012 147.32417297]
[66.55897522 142.03482056]
[60.02112961 135.55178833]
[54.71075058 128.07539368]
[50.77430725 119.83359528]
[48.31662369 111.07507324]
[47.39811707 102.06175232]
[48.03337097 93.06094360]
[50.19107437 84.33743286]
[53.79531479 76.14569855]
[58.72817612 68.72245026]
[48.21152496 58.02665329]
[37.69487381 47.33085632]
[27.17822266 36.63505936]
[16.66157341 25.93926430]
[1.08763289 25.63903427]
[-9.42538071 14.64216232]
[-9.04318142 -0.20335972]
[-19.55983162 -10.89915657]
[-30.07648087 -21.59495354]
[-40.59313202 -32.29074860]
[-54.51728439 -26.25068474]
[-69.68325043 -25.65238190]
[-84.03995514 -30.57676125]
[-95.64576721 -40.35783768]
[-102.93110657 -53.67280197]
[-104.91068268 -68.72091675]
[-101.31678009 -83.46704102]
[-92.63543701 -95.91689301]
[-80.04074097 -104.38672638]
[-65.23601532 -107.73106384]
[-50.22348404 -105.49761200]
[-37.03346252 -97.98843384]
[-27.44979668 -86.21907806]
[-22.76859856 -71.78125000]
[-23.62295914 -56.62755203]
[-29.89733505 -42.80739975]
[-19.38068581 -32.11160278]
[-8.86403465 -21.41580582]
[1.65261567 -10.72000980]
[16.50247574 -10.85142136]
[27.32021904 -0.15417658]
[27.35737038 15.42261314]
[37.87401962 26.11841011]
[48.39067078 36.81420517]
[58.90732193 47.51000214]
[69.42397308 58.20579910]
[81.43977356 51.13934708]
[95.02581024 47.48557663]
[109.22341919 47.57325745]
[123.01181793 51.46461105]
[135.38148499 58.94593048]
[145.40803528 69.53822327]
[152.32121277 82.52742767]
[155.56373596 97.01238251]
[170.20358276 93.74517822]
[184.84344482 90.47797394]
[193.10366821 77.00414276]
[208.49125671 73.39886475]
[221.87699890 81.80108643]
[225.31938171 97.22592163]
[216.77610779 110.52208710]
[201.31573486 113.80120087]
[188.11064148 105.11782837]
[173.47079468 108.38503265]
[158.83093262 111.65223694]
[154.09939575 125.88644409]
[163.86999512 137.26780701]
[173.64057922 148.64918518]
[183.41116333 160.03056335]
[193.18174744 171.41192627]
[208.04154968 176.84306335]
[210.46099854 191.53984070]
[220.23158264 202.92121887]
[235.87481689 207.84271240]
[239.16967773 223.90745544]
[226.72669983 234.58941650]
[211.34614563 228.89990234]
[208.85021973 212.69180298]
[199.07962036 201.31042480]
[184.91868591 196.69337463]
[181.80038452 181.18251038]
[172.02980042 169.80114746]
[162.25920105 158.41976929]
[152.48861694 147.03840637]
[142.71803284 135.65702820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 53]
[18 52]
[19 51]
[20 50]
[21 49]
[24 46]
[25 45]
[26 44]
[27 43]
[61 72]
[62 71]
[63 70]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
