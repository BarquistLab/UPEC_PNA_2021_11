%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACACCAACCUCAUGAAAUAAGUGUGGAUACCGUCUUAUGGAGCAAAACCCGCAGUCACAGCUGAAACUUCUUGUCACCCGUGGUAAGG\
) } def
/len { sequence length } bind def

/coor [
[48.93727112 147.47920227]
[33.18174362 141.87081909]
[19.94546700 148.92779541]
[6.70919180 155.98477173]
[0.45089445 162.92654419]
[-7.09545469 163.04798889]
[-20.56252289 169.65390015]
[-34.02959061 176.25981140]
[-32.38647842 191.32885742]
[-35.99938583 206.05035400]
[-44.43204117 218.64663696]
[-56.66615677 227.59661865]
[-71.22440338 231.81956482]
[-86.34880829 230.80551147]
[-100.21301270 224.67692566]
[-111.14286041 214.17387390]
[-117.81851196 200.56463623]
[-119.43385315 185.49258423]
[-115.79382324 170.77777100]
[-107.33796692 158.19705200]
[-95.08737946 149.26962280]
[-80.52137756 145.07353210]
[-65.39886475 146.11544800]
[-51.54597473 152.26956177]
[-40.63550186 162.79275513]
[-27.16843605 156.18682861]
[-13.70136738 149.58091736]
[-0.34779036 142.74850464]
[12.88848591 135.69151306]
[26.12476158 128.63453674]
[28.16348648 115.79072571]
[37.41142273 106.37117004]
[50.60123062 104.02799988]
[62.88164139 109.85371399]
[76.34870911 103.24780273]
[78.92626953 88.78263092]
[89.48636627 78.56649780]
[104.02893066 76.46918488]
[117.04537964 83.28513336]
[130.51245117 76.67922211]
[143.97950745 70.07331085]
[157.44657898 63.46739578]
[170.91365051 56.86148453]
[184.38072205 50.25556946]
[194.60018921 33.04119873]
[213.74391174 34.66419601]
[226.73429871 27.16419411]
[239.72468567 19.66419411]
[252.71505737 12.16419411]
[250.50479126 -3.66330671]
[254.48677063 -19.10084724]
[264.03109741 -31.82330513]
[277.67245483 -39.92599106]
[293.33486938 -42.20978165]
[308.64779663 -38.35848618]
[321.30471802 -28.98228455]
[334.03439331 -36.91674423]
[346.76403809 -44.85120392]
[359.49371338 -52.78566360]
[366.72729492 -67.50325775]
[383.10571289 -68.32747650]
[391.78027344 -54.41043091]
[383.82730103 -40.06879044]
[367.42816162 -40.05599976]
[354.69851685 -32.12154007]
[341.96884155 -24.18708038]
[329.23916626 -16.25262070]
[332.07073975 -2.40085602]
[329.96615601 11.61022949]
[323.16125488 24.07159233]
[312.46649170 33.45605087]
[299.17037964 38.60544205]
[284.88442993 38.87352753]
[271.34765625 34.20701599]
[260.21505737 25.15457535]
[247.22468567 32.65457535]
[234.23429871 40.15457535]
[221.24391174 47.65457535]
[219.41932678 57.96434402]
[211.98532104 65.64924622]
[201.30708313 67.90715790]
[190.98663330 63.72263718]
[177.51956177 70.32855225]
[164.05249023 76.93446350]
[150.58541870 83.54037476]
[137.11836243 90.14628601]
[123.65129089 96.75219727]
[121.07373047 111.21736908]
[110.51363373 121.43350220]
[95.97106934 123.53081512]
[82.95462036 116.71486664]
[69.48755646 123.32077789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 30]
[3 29]
[4 28]
[6 27]
[7 26]
[8 25]
[34 92]
[35 91]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[46 78]
[47 77]
[48 76]
[49 75]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
