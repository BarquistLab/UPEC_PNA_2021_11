%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUCAAAAAAUUCGACACAUUUUAAGGGGAUUUUCGCAAUGCGUAUCAUUCUGCUUGGCGCUCCGGGCGCGGGGAAAGGGACUCAGGCUC\
) } def
/len { sequence length } bind def

/coor [
[21.23165512 193.23124695]
[12.10600758 205.13597107]
[-1.38778794 211.68711853]
[-16.38655281 211.49462891]
[-29.70777512 204.59933472]
[-38.52489471 192.46432495]
[-40.96704865 177.66445923]
[-36.51605225 163.34005737]
[-26.11650085 152.53063965]
[-41.09724808 153.29037476]
[-56.07799530 154.05010986]
[-71.05874634 154.80984497]
[-86.03948975 155.56958008]
[-101.02024078 156.32931519]
[-116.00098419 157.08906555]
[-121.06637573 171.42120361]
[-131.23457336 182.72058105]
[-144.95501709 189.26414490]
[-160.13540649 190.05403137]
[-174.46087646 184.96978760]
[-185.74687195 174.78672791]
[-192.27238464 161.05770874]
[-193.04229736 145.87628174]
[-187.93920898 131.55751038]
[-177.74131775 120.28491974]
[-164.00372314 113.77748108]
[-148.82128906 113.02753448]
[-134.50926208 118.14945221]
[-123.25008392 128.36216736]
[-116.76072693 142.10830688]
[-101.77997589 141.34857178]
[-86.79923248 140.58883667]
[-71.81848145 139.82910156]
[-56.83773422 139.06936646]
[-41.85698700 138.30963135]
[-26.87623787 137.54988098]
[-19.67478180 132.45851135]
[-9.83840084 133.74752808]
[4.04390764 128.06584167]
[9.09416008 116.93219757]
[20.78242493 112.14902496]
[32.94262314 116.83747864]
[47.00890350 111.62789917]
[56.25672531 99.95198059]
[71.88507080 102.41477966]
[85.95135498 97.20520020]
[95.02521515 86.56768799]
[108.83906555 88.72852325]
[122.90534973 83.51894379]
[133.15928650 71.47039795]
[147.78152466 74.30581665]
[161.84779358 69.09624481]
[175.91407776 63.88666153]
[189.98036194 58.67708206]
[200.23429871 46.62854004]
[214.85653687 49.46396255]
[218.43893433 45.10504913]
[222.92530823 42.92458725]
[227.27169800 42.88590622]
[230.61840820 44.51864243]
[245.13957214 40.75885391]
[259.66073608 36.99906540]
[274.18188477 33.23927689]
[288.70303345 29.47949028]
[302.52099609 19.65604782]
[315.78573608 30.21460724]
[309.31185913 45.88385010]
[292.46282959 44.00064468]
[277.94168091 47.76043320]
[263.42050171 51.52022171]
[248.89935303 55.28001022]
[234.37820435 59.03979874]
[220.06611633 63.53024673]
[210.81828308 75.20616150]
[195.18994141 72.74336243]
[181.12365723 77.95294189]
[167.05737305 83.16252136]
[152.99108887 88.37210083]
[143.74327087 100.04801941]
[128.11492920 97.58522034]
[114.04864502 102.79479980]
[104.97478485 113.43231201]
[91.16093445 111.27147675]
[77.09465027 116.48105621]
[66.84071350 128.52960205]
[52.21848297 125.69418335]
[38.15219879 130.90376282]
[26.85628128 145.32402039]
[9.72559071 141.94815063]
[-4.15671730 147.62983704]
[9.85204792 152.99215698]
[19.97092056 164.06501770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[38 90]
[39 89]
[42 87]
[43 86]
[45 84]
[46 83]
[48 81]
[49 80]
[51 78]
[52 77]
[53 76]
[54 75]
[56 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
