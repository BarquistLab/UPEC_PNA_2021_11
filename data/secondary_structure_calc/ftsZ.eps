%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.18
%%CreationDate: Thu Dec 16 09:27:24 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACGGCCUCAGGCGACAGGCACAAAUCGGAGAGAAACUAUGUUUGAACCAAUGGAACUUACCAAUGACGCGGUGAUUAAAGUCAUCGGCG\
) } def
/len { sequence length } bind def

/coor [
[113.80776978 139.91986084]
[107.70325470 141.53202820]
[101.42663574 142.21627808]
[95.11813354 141.95732117]
[88.91870880 140.76094055]
[82.96686554 138.65386963]
[77.39557648 135.68318176]
[67.24617004 146.72807312]
[57.09675980 157.77294922]
[50.83164597 173.52684021]
[33.95907974 171.86767578]
[30.88261223 155.19519043]
[46.05187607 147.62355042]
[56.20128632 136.57865906]
[66.35069275 125.53377533]
[59.45090866 111.83303070]
[57.89897919 96.57167053]
[61.89958572 81.76245880]
[49.73461533 72.98672485]
[37.56964874 64.21099091]
[25.40467834 55.43525314]
[13.23970985 46.65951920]
[1.07474029 37.88378525]
[-13.83370399 44.80358505]
[-30.11002350 43.32961273]
[-43.38062668 33.95168686]
[-50.12659454 19.27085114]
[-48.61656570 3.27858162]
[-61.07098770 -5.08128548]
[-77.02653503 -3.40796232]
[-88.17979431 -14.93984890]
[-85.97492981 -30.83066940]
[-72.10334015 -38.89034271]
[-57.20610428 -32.93618393]
[-52.71112061 -17.53570747]
[-40.25669861 -9.17584038]
[-28.31319427 -16.02257156]
[-14.51552010 -17.01591110]
[-1.59061599 -11.90163994]
[7.88194370 -1.63836670]
[11.98474884 11.78159237]
[9.85047531 25.71881485]
[22.01544380 34.49454880]
[34.18041229 43.27028275]
[46.34538269 52.04602051]
[58.51035309 60.82175446]
[70.67532349 69.59748840]
[83.52874756 61.10337448]
[98.57336426 57.78372192]
[113.80776978 60.08014297]
[127.20531464 67.68714905]
[138.75007629 58.11017990]
[144.43141174 43.34423447]
[159.16696167 41.17334747]
[170.71173096 31.59637833]
[182.25650024 22.01941109]
[183.47280884 6.26199532]
[195.52923584 -3.95652151]
[211.27291870 -2.57367587]
[221.36338806 9.59011459]
[219.81417847 25.31828880]
[207.54438782 35.27959824]
[191.83346558 33.56417847]
[180.28869629 43.14114761]
[168.74392700 52.71811676]
[163.88836670 66.79904938]
[148.32704163 69.65494537]
[136.78228760 79.23191833]
[142.21627808 101.42663574]
[135.29631042 123.20386505]
[146.16821289 133.53837585]
[157.04010010 143.87287903]
[168.08499146 154.02227783]
[179.29971313 163.98370361]
[190.51445007 173.94511414]
[201.72917175 183.90653992]
[212.94389343 193.86796570]
[224.15863037 203.82937622]
[240.32225037 206.59869385]
[245.75119019 222.07315063]
[234.86061096 234.33395386]
[218.85380554 230.76823425]
[214.19720459 215.04411316]
[202.98248291 205.08268738]
[191.76774597 195.12126160]
[180.55302429 185.15985107]
[169.33830261 175.19842529]
[158.12356567 165.23701477]
[150.88352966 163.10534668]
[146.70559692 154.74476624]
[135.83370972 144.41026306]
[124.96181488 134.07575989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 15]
[8 14]
[9 13]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[28 36]
[29 35]
[51 68]
[52 67]
[54 65]
[55 64]
[56 63]
[70 92]
[71 91]
[72 90]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
/range 0.8 def
/drawreliability {
  /Smax 1 def
  0
  coor {
    aload pop
    S 3 index get
    Smax div range mul
    invert {range exch sub} if
    dup 0 ge
    {1 1 sethsbcolor} {pop 1 1 1 setrgbcolor} ifelse
    newpath
    fsize 2 div 0 360 arc
    fill
    1 add
  } forall
} bind def
/colorbar { % xloc yloc colorbar -> []
  /STR 8 string def
  gsave
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    /tics 64 def
    gsave
      10 tics div 1 scale
      0 1 tics
      {
          dup 0 moveto 0.5 add
          tics div range mul
          invert {range exch sub} if
          1 1 sethsbcolor
          1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
      } for
    grestore
    0 setgray
    -0.1 1.01 moveto (0) gsave 0.1 dup scale show grestore
    10 1.01 moveto Smax STR cvs
    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def
/S [
  0.98956
  0.97871
  0.97739
  0.99755
  0.90540
  0.91320
  0.46134
  0.48172
  0.47479
  0.56061
  0.92320
  0.96862
  0.47479
  0.48172
  0.46134
  0.85815
  0.96872
  0.43392
  0.43706
  0.43566
  0.43904
  0.43950
  0.40391
  0.73335
  0.73065
  0.72052
  0.71941
  0.39798
  0.41886
  0.67027
  0.77119
  0.74820
  0.71378
  0.88400
  0.41886
  0.39798
  0.95687
  0.96274
  0.60918
  0.65667
  0.91137
  0.40391
  0.43950
  0.43904
  0.43566
  0.43706
  0.43392
  0.90963
  0.99029
  0.86428
  0.68308
  0.67863
  0.91024
  0.83385
  0.88487
  0.87826
  0.99839
  0.99847
  0.91165
  0.91050
  0.91802
  0.99819
  0.87826
  0.88487
  0.83385
  0.98002
  0.67863
  0.68308
  0.99248
  0.74673
  0.82296
  0.41955
  0.97912
  0.99439
  0.99577
  0.99634
  0.97835
  0.87276
  0.99988
  1.00000
  0.99997
  0.99994
  0.87276
  0.97835
  0.99634
  0.99577
  0.99439
  0.97912
  0.42385
  0.41955
  0.82296
  0.74673
] def

/invert true def
drawreliability
0.1 0.1 colorbar
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
