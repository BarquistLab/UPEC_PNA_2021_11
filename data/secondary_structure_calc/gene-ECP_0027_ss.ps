%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Thu Dec 16 08:22:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAAGUGCUGGAAAUCGAUCCGGCACUGGAGGCGUAACAUGCAGAUCCUGUUGGCCAACCCGCGUGGUUUUUGUGCCGGGGUAGACCGCG\
) } def
/len { sequence length } bind def

/coor [
[115.32551575 142.77035522]
[103.23770905 151.65206909]
[88.31459045 150.13528442]
[78.26100922 139.00309753]
[78.26763916 124.00310516]
[88.33289337 112.87889862]
[74.45058441 118.56057739]
[60.56827927 124.24226379]
[46.68597031 129.92395020]
[32.80366516 135.60562134]
[18.92135620 141.28730774]
[5.03904772 146.96899414]
[-8.84325981 152.65068054]
[-22.72556877 158.33236694]
[-28.60329247 173.00300598]
[-43.16585159 179.14364624]
[-57.77353668 173.11114502]
[-63.75986862 158.48448181]
[-57.57326126 143.94139099]
[-42.88412094 138.11003113]
[-28.40725136 144.45005798]
[-14.52494335 138.76837158]
[-0.64263546 133.08668518]
[13.23967266 127.40500641]
[27.12198067 121.72332001]
[41.00428772 116.04163361]
[54.88659668 110.35995483]
[68.76890564 104.67826843]
[82.65121460 98.99658966]
[91.01107788 86.54216766]
[91.01107788 71.54216766]
[80.05653381 54.78597260]
[89.94445038 38.31340027]
[88.93180847 23.34762192]
[87.91915894 8.38184166]
[84.15189362 -0.17164351]
[87.13375854 -7.10493946]
[86.62714386 -22.09638214]
[86.12053680 -37.08782578]
[85.61392212 -52.07926559]
[85.10730743 -67.07070923]
[71.80234528 -74.87977600]
[64.85179138 -88.65269470]
[66.47354126 -103.99457550]
[76.15010071 -116.00989532]
[90.79370880 -120.86458588]
[105.73165894 -117.00955200]
[116.19729614 -105.67491150]
[118.85106659 -90.47751617]
[112.84617615 -76.26678467]
[100.09875488 -67.57732391]
[100.60536194 -52.58588028]
[101.11197662 -37.59443665]
[101.61859131 -22.60299492]
[102.12519836 -7.61155176]
[102.88494110 7.36919594]
[103.89758301 22.33497429]
[104.91023254 37.30075455]
[113.36284637 43.47924423]
[116.98850250 53.53791428]
[114.31303406 64.11924744]
[106.01107788 71.54216766]
[106.01107788 86.54216766]
[114.88059235 91.77296448]
[119.07732391 102.70075989]
[131.53173828 111.06063080]
[143.98616028 119.42049408]
[156.44058228 127.78036499]
[168.89500427 136.14022827]
[181.34942627 144.50009155]
[193.80384827 152.85995483]
[206.25827026 161.21983337]
[222.02867126 162.48675537]
[228.28387451 176.00422668]
[244.05427551 177.27116394]
[250.30947876 190.78862000]
[266.69882202 191.35527039]
[274.16287231 205.95732117]
[265.02322388 219.57345581]
[248.68197632 218.19654846]
[241.94960022 203.24304199]
[227.07003784 202.57406616]
[219.92401123 188.45864868]
[205.04443359 187.78965759]
[197.89840698 173.67425537]
[185.44398499 165.31437683]
[172.98956299 156.95451355]
[160.53514099 148.59465027]
[148.08071899 140.23478699]
[135.62629700 131.87492371]
[123.17187500 123.51505280]
[110.71745300 115.15518188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[30 63]
[31 62]
[33 58]
[34 57]
[35 56]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
[70 87]
[71 86]
[72 85]
[74 83]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
